#pragma kernel get_motion_vector
#pragma kernel generate_min_max_mipmap
#pragma kernel backward_search
#pragma kernel generate_max_mipmap
#pragma kernel compute_visibility

// motion vector kernel
RWTexture2D<float4> forward_warping_depth_texture;
RWTexture2D<float4> motion_vector;
Texture2D<float> prev_depth_texture;
float4x4 prev_projection_matrix;
float4x4 inversed_prev_projection_view_matrix;
float4x4 current_projection_view_matrix;
float far_clip_plane, near_clip_plane;

// min-max mipmap kernel
RWTexture2D<float4> minmax_mipmap_layer_src;
RWTexture2D<float4> minmax_mipmap_layer_dst;

// backward search kernel
RWTexture2D<float> backward_warping_depth_texture;
Texture2D<float4> motion_vector_and_predicted_depth_texture;
Texture2D<float4> mipmap_motion_vectors_texture;
SamplerState sampler_linear_clamp;
int max_mipmap_level, screen_width, screen_height;
// hyperparameter in backward search
int max_bound_iter;
int seed_num;
int max_search_iter;
float threshold;

// max mipmap kernel and NBuffer kernel
RWTexture2D<float> prev_yMap_buffer;
RWTexture2D<float> cur_yMap_buffer;
uint yMap_width, yMap_height;

// compute visibility kernel
int object_num;
int yMap_mipmap_max_level;
float4 bounds_min, bounds_max;
Texture2D<float> yMap_mipmap_buffer;
StructuredBuffer<float4x4> model_matrix_buffer;
AppendStructuredBuffer<float4x4> cull_result_buffer;

RWTexture2D<float4> debug_texture;

// Constant
static const float FLT_MAX = 3.4028235e+38;
static const float4 frustum_planes[6] = {
    float4( 1,  0,  0,  1),   //  Left   :  x + w < 0
    float4(-1,  0,  0,  1),   //  Right  : -x + w < 0
    float4( 0,  1,  0,  1),   //  Bottom :  y + w < 0
    float4( 0, -1,  0,  1),   //  Top    : -y + w < 0
    float4( 0,  0,  1,  0),   //  Near   :  z     < 0
    float4( 0,  0, -1,  1)    //  Far    : -z + w < 0
};

[numthreads(8, 8, 1)]
void get_motion_vector(uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    prev_depth_texture.GetDimensions(width, height);
    if (id.x >= width || id.y >= height) return;

    float depth = -prev_projection_matrix[2][2] + prev_projection_matrix[2][3] * (near_clip_plane + prev_depth_texture[id.xy] * (far_clip_plane - near_clip_plane)) / (far_clip_plane * near_clip_plane);
    float4 clipSpacePos = float4(
        (float)id.x / width * 2.0 - 1.0,
        (float)id.y / height * 2.0 - 1.0,
        depth,                            
        1.0                            
    );
    
    float4 worldPos = mul(inversed_prev_projection_view_matrix, clipSpacePos);
    worldPos /= worldPos.w;
    forward_warping_depth_texture[id.xy] = worldPos;
    float4 currentClipPos = mul(current_projection_view_matrix, worldPos);
    currentClipPos /= currentClipPos.w;
    
    float2 currentPixel = float2(
        (currentClipPos.x + 1.0) * 0.5 * width,
        (currentClipPos.y + 1.0) * 0.5 * height
    );
    
    float2 diff = currentPixel - float2(id.x, id.y);
    forward_warping_depth_texture[id.xy] = float4(diff, (currentClipPos.z + 1.0) * 0.5, 0.0);
    motion_vector[id.xy] = float4(diff, diff);
}

[numthreads(8, 8, 1)]
void generate_min_max_mipmap(uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    minmax_mipmap_layer_dst.GetDimensions(width, height);
    if (id.x >= width || id.y >= height) return;
    int srcX = id.x * 2;
    int srcY = id.y * 2;
    float4 val0 = minmax_mipmap_layer_src[int2(srcX, srcY)];
    float4 val1 = minmax_mipmap_layer_src[int2(srcX + 1, srcY)];
    float4 val2 = minmax_mipmap_layer_src[int2(srcX, srcY + 1)];
    float4 val3 = minmax_mipmap_layer_src[int2(srcX + 1, srcY + 1)];
    float2 minXY = min(min(val0.xy, val1.xy), min(val2.xy, val3.xy));
    float2 maxZW = max(max(val0.zw, val1.zw), max(val2.zw, val3.zw));
    minmax_mipmap_layer_dst[id.xy] = float4(minXY, maxZW);
}

float4 get_mipmap_depth(float2 p, int lod)
{
    if (lod < 0 || lod > max_mipmap_level) return float4(FLT_MAX, FLT_MAX, -FLT_MAX, -FLT_MAX);
    return mipmap_motion_vectors_texture.SampleLevel(sampler_linear_clamp, p / float2(screen_width, screen_height), max_mipmap_level);
}

bool valid_motion_bound(float4 motion)
{
    return motion.x != FLT_MAX && motion.y != FLT_MAX && motion.z != -FLT_MAX && motion.w != -FLT_MAX;
}

float4 get_local_motion_bound(float4 b)
{
    float4 m = float4(FLT_MAX, FLT_MAX, -FLT_MAX, -FLT_MAX);
    int LOD = int(min(ceil(max(0.0f, log2(max(b.z - b.x, b.w - b.y)))), max_mipmap_level));
    float2 p[4] = {b.xy, b.xw, b.zy, b.zw};
    for (int i = 0; i < 4; ++ i)
    {
        float4 s = get_mipmap_depth(p[i], LOD);
        if (!valid_motion_bound(s)) continue;
        m = float4(min(m.xy, s.xy), max(m.zw, s.zw));
    }
    return m;
}

float4 get_motion_bound(float2 p)
{
    float4 b = get_mipmap_depth(float2(0, 0), max_mipmap_level);
    for (int k = 0; k < max_bound_iter; ++ k)
    {
        float4 m = get_local_motion_bound(float4(p - b.zw, p - b.xy));
        if (!valid_motion_bound(m)) break;
        b = m;
    }
    return b;
}

float rand(uint seed)
{
    seed = (seed * 1103515245 + 12345) & 0x7fffffff;
    return float(seed) / 0x7fffffff;
}

float2 get_sample_point(float4 bound, uint id)
{
    float rx = rand(id);
    float ry = rand(id + 1);
    float x = lerp(bound.x, bound.z, rx);
    float y = lerp(bound.y, bound.w, ry);
    return float2(x, y);
}

float fixed_point_iteration(float2 p, float2 v0)
{
    float2 q = p - v0;
    float4 s = motion_vector_and_predicted_depth_texture.SampleLevel(sampler_linear_clamp, q / float2(screen_width, screen_height), 0);
    for (int k = 0; k < max_bound_iter && s.z < 1.0f; ++ k)
    {
        float2 w = p - s.xy;
        if (distance(q, w) < threshold) return s.z;
        q = w;
        s = motion_vector_and_predicted_depth_texture.SampleLevel(sampler_linear_clamp, q / float2(screen_width, screen_height), 0);
    }
    return 1.0f;
}

[numthreads(8, 8, 1)]
void backward_search(uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    motion_vector_and_predicted_depth_texture.GetDimensions(width, height);
    if (id.x >= width || id.y >= height) return;

    float4 bound = get_motion_bound(float2(id.xy));
    float predictedDepth = 1.0f;
    for (int i = 0; i < seed_num; ++ i)
    {
        float d = fixed_point_iteration(float2(id.xy), get_sample_point(bound, i));
        if (d < 0) d = 1.0f;
        predictedDepth = min(predictedDepth, d);
    }
    backward_warping_depth_texture[id.xy] = predictedDepth;
}

[numthreads(8, 8, 1)]
void generate_max_mipmap(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= yMap_width || id.y >= yMap_height) return;
    int srcX = id.x * 2;
    int srcY = id.y * 2;
    cur_yMap_buffer[id.xy] = max(max(max(prev_yMap_buffer[int2(srcX, srcY)], prev_yMap_buffer[int2(srcX + 1, srcY)]),
        prev_yMap_buffer[int2(srcX, srcY + 1)]),
        prev_yMap_buffer[int2(srcX + 1, srcY + 1)]);
}

[numthreads(64, 1, 1)]
void compute_visibility(uint3 id : SV_DispatchThreadID)
{
    int index = id.x;
    if (index >= object_num) return;
    
    // VFC
    float4x4 model_matrix = model_matrix_buffer[index];
    float4x4 projection_view_model_matrix = mul(current_projection_view_matrix, model_matrix);
    float4 corners[8];
    corners[0] = mul(projection_view_model_matrix, float4(bounds_min.x, bounds_min.y, bounds_min.z, 1.0f));
    corners[1] = mul(projection_view_model_matrix, float4(bounds_max.x, bounds_min.y, bounds_min.z, 1.0f));
    corners[2] = mul(projection_view_model_matrix, float4(bounds_min.x, bounds_max.y, bounds_min.z, 1.0f));
    corners[3] = mul(projection_view_model_matrix, float4(bounds_max.x, bounds_max.y, bounds_min.z, 1.0f));
    corners[4] = mul(projection_view_model_matrix, float4(bounds_min.x, bounds_min.y, bounds_max.z, 1.0f));
    corners[5] = mul(projection_view_model_matrix, float4(bounds_max.x, bounds_min.y, bounds_max.z, 1.0f));
    corners[6] = mul(projection_view_model_matrix, float4(bounds_min.x, bounds_max.y, bounds_max.z, 1.0f));
    corners[7] = mul(projection_view_model_matrix, float4(bounds_max.x, bounds_max.y, bounds_max.z, 1.0f));
    bool is_outside = false;
    for (int p = 0; p < 6; ++ p)
    {
        bool outside_plane = true;
        for (int v = 0; v < 8; ++ v) 
        {
            if (dot(frustum_planes[p], corners[v]) > 0) 
            {
                outside_plane = false;
                break;
            }
        }
        if (outside_plane) 
        {
            is_outside = true;
            break;
        }
    }
    if (is_outside) return;
    
    // WOC
    float occludee_min_depth = 1.0f;
    float2 low_left = float2(1, 1) * FLT_MAX;
    float2 up_right = float2(-1, -1) * FLT_MAX;
    [unroll]
    for (int i = 0; i < 8; ++ i)
    {
        corners[i] /= corners[i].w;
        corners[i].x = screen_width * (corners[i].x + 1.0f) * 0.5f;
        corners[i].y = screen_height * (corners[i].y + 1.0f) * 0.5f;
        corners[i].z = (corners[i].z + 1.0f) * 0.5f;
        occludee_min_depth = min(occludee_min_depth, corners[i].z);
        low_left = min(low_left, corners[i].xy);
        up_right = max(up_right, corners[i].xy);
    }
    uint2 low_left_int = uint2(floor(low_left.x), floor(low_left.y));
    uint2 up_right_int = uint2(ceil(up_right.x), ceil(up_right.y));
    int rect_width = up_right.x - low_left.x + 1;
    int rect_height = up_right.y - low_left.y + 1;
    int lod = firstbithigh(min(rect_width, rect_height));
    float screen_space_max_depth = 0.0f;
    int stride = 1 << lod;
    for (uint i = low_left_int.x; i <= up_right_int.x; i += stride)
    {
        for (uint j = low_left_int.y; j <= up_right_int.y; j += stride)
        {
            screen_space_max_depth = max(screen_space_max_depth, yMap_mipmap_buffer.Load(int3(i / stride, j / stride, lod)));
        }
    }
    if (screen_space_max_depth >= occludee_min_depth) cull_result_buffer.Append(model_matrix_buffer[index]);
}